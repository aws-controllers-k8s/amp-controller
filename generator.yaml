ignore:
  field_paths:
    - CreateWorkspaceInput.ClientToken
    - CreateRuleGroupsNamespaceInput.ClientToken
    - CreateRuleGroupsNamespaceInput.Data
    - CreateAlertManagerDefinitionInput.ClientToken
    - CreateAlertManagerDefinitionInput.Data
  operations: null
  resource_names:
    - LoggingConfiguration
resources:
  Workspace:
    fields:
      alias:
        print:
          name: ALIAS
      Tags:
        compare:
          is_ignored: True
    update_operation:
      custom_method_name: customUpdateWorkspace
    hooks:
      delta_pre_compare:
        code: customPreCompare(delta, a, b)
      sdk_create_post_set_output:
        template_path: hooks/workspace/sdk_create_post_set_output.go.tpl
  RuleGroupsNamespace:
    shortNames:
      - rgn
    fields:
      Name:
        is_immutable: true
      WorkspaceID:
        is_immutable: true
        print:
          name: WORKSPACE-ID      
      Tags:
        compare:
          is_ignored: True
      # The data field is of type byte because the API expects a base64 string of the rule groups yaml configuration.
      # However, instead of the user providing a base64 encoding, they should provide a regular (multiline) 
      # string field and have the controller convert it to base64. This will make the CR's easier to use. 
      # Hence, we create a new field that takes in a string for the configuration. The user will use the `configuration` 
      # field instead of the `data` field to input the desired rule groups config. We have to manually handle 
      # the create/read/update for the new field and also the `data` field which is not going to be 
      # user facing.
      configuration:
        type: "string"
        is_required: True
    update_operation:
      custom_method_name: customUpdateRuleGroupsNamespace
    hooks:
        delta_pre_compare:
          code: customPreCompare(delta, a, b)
        sdk_create_post_build_request:
          template_path: hooks/rule_groups_namespace/sdk_create_post_build_request.go.tpl
        sdk_create_post_set_output:
          template_path: hooks/rule_groups_namespace/sdk_create_post_set_output.go.tpl
        sdk_read_one_pre_set_output:
          template_path: hooks/rule_groups_namespace/sdk_read_one_pre_set_output.go.tpl
    exceptions:
      terminal_codes:
        - ValidationException
  AlertManagerDefinition:
    tags:
      ignore: true
    fields:
      workspaceID:
        is_primary_key: true 
        is_immutable: true
        print:
          name: WORKSPACE-ID      
      # Exact same issue with the data field as the rules group resource. Reasoning for a new field is 
      # the same as the explanation above. Instead of a base64 encoded byte slice, we expect a string and 
      # handle the conversion ourselves. The user will interact with the new `configuration` field 
      # instead of the `data` field. 
      configuration:
        type: "string"
        is_required: True
    update_operation:
      custom_method_name: customUpdateAlertManagerDefinition
    hooks:
      sdk_create_post_build_request:
        template_path: hooks/alert_manager_definition/sdk_create_post_build_request.go.tpl
      sdk_create_post_set_output:
        template_path: hooks/alert_manager_definition/sdk_create_post_set_output.go.tpl
      sdk_read_one_pre_set_output:
        template_path: hooks/alert_manager_definition/sdk_read_one_pre_set_output.go.tpl
      sdk_delete_pre_build_request:
        template_path: hooks/alert_manager_definition/sdk_delete_pre_build_request.go.tpl
    exceptions:
      terminal_codes:
        - ValidationException
sdk_names:
  model_name: amp 